// Mocks generated by Mockito 5.4.4 from annotations
// in my_portfolio_web/test/app/services/service_locator_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:my_portfolio_web/app/controllers/controller_factory.dart'
    as _i7;
import 'package:my_portfolio_web/app/data/models/tech_stack_item.dart' as _i5;
import 'package:my_portfolio_web/app/data/repositories/portfolio_repository.dart'
    as _i4;
import 'package:my_portfolio_web/app/services/analytics_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsService extends _i1.Mock implements _i2.AnalyticsService {
  MockAnalyticsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);

  @override
  List<Map<String, dynamic>> get debugEvents => (super.noSuchMethod(
        Invocation.getter(#debugEvents),
        returnValue: <Map<String, dynamic>>[],
      ) as List<Map<String, dynamic>>);

  @override
  _i3.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> trackEvent(
    String? eventName, [
    Map<String, dynamic>? parameters,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackEvent,
          [
            eventName,
            parameters,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setUserProperty(
    String? name,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserProperty,
          [
            name,
            value,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> trackPageView(
    String? pageName, [
    String? pageClass,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackPageView,
          [
            pageName,
            pageClass,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> trackButtonClick(
    String? buttonName, [
    String? location,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackButtonClick,
          [
            buttonName,
            location,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> trackSectionView(String? sectionName) => (super.noSuchMethod(
        Invocation.method(
          #trackSectionView,
          [sectionName],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> trackDownload(
    String? fileName,
    String? fileType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackDownload,
          [
            fileName,
            fileType,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> trackContactSubmission(String? method) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackContactSubmission,
          [method],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> trackProjectView(String? projectName) => (super.noSuchMethod(
        Invocation.method(
          #trackProjectView,
          [projectName],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> trackError(
    String? errorType,
    String? errorMessage,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackError,
          [
            errorType,
            errorMessage,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void clearDebugEvents() => super.noSuchMethod(
        Invocation.method(
          #clearDebugEvents,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> getAnalyticsStatus() => (super.noSuchMethod(
        Invocation.method(
          #getAnalyticsStatus,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  void printDebugEvents() => super.noSuchMethod(
        Invocation.method(
          #printDebugEvents,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> trackCustomEvent({
    required String? eventName,
    Map<String, dynamic>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackCustomEvent,
          [],
          {
            #eventName: eventName,
            #parameters: parameters,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [PortfolioRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPortfolioRepository extends _i1.Mock
    implements _i4.PortfolioRepository {
  MockPortfolioRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i5.TechStackItem> getTechStack() => (super.noSuchMethod(
        Invocation.method(
          #getTechStack,
          [],
        ),
        returnValue: <_i5.TechStackItem>[],
      ) as List<_i5.TechStackItem>);

  @override
  Map<String, Map<String, dynamic>> getSocialLinks() => (super.noSuchMethod(
        Invocation.method(
          #getSocialLinks,
          [],
        ),
        returnValue: <String, Map<String, dynamic>>{},
      ) as Map<String, Map<String, dynamic>>);

  @override
  List<String> getAnimatedGreetings() => (super.noSuchMethod(
        Invocation.method(
          #getAnimatedGreetings,
          [],
        ),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<String> getAnimatedIntroductions() => (super.noSuchMethod(
        Invocation.method(
          #getAnimatedIntroductions,
          [],
        ),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<String> getDesignPhilosophyQuotes() => (super.noSuchMethod(
        Invocation.method(
          #getDesignPhilosophyQuotes,
          [],
        ),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<Map<String, dynamic>> getSkillCategories() => (super.noSuchMethod(
        Invocation.method(
          #getSkillCategories,
          [],
        ),
        returnValue: <Map<String, dynamic>>[],
      ) as List<Map<String, dynamic>>);

  @override
  List<Map<String, String>> getProjects() => (super.noSuchMethod(
        Invocation.method(
          #getProjects,
          [],
        ),
        returnValue: <Map<String, String>>[],
      ) as List<Map<String, String>>);

  @override
  List<Map<String, String>> getCareerTimeline() => (super.noSuchMethod(
        Invocation.method(
          #getCareerTimeline,
          [],
        ),
        returnValue: <Map<String, String>>[],
      ) as List<Map<String, String>>);

  @override
  Map<String, String> getContactInfo() => (super.noSuchMethod(
        Invocation.method(
          #getContactInfo,
          [],
        ),
        returnValue: <String, String>{},
      ) as Map<String, String>);

  @override
  List<Map<String, String>> getEducationInfo() => (super.noSuchMethod(
        Invocation.method(
          #getEducationInfo,
          [],
        ),
        returnValue: <Map<String, String>>[],
      ) as List<Map<String, String>>);

  @override
  String getProfessionalSummary() => (super.noSuchMethod(
        Invocation.method(
          #getProfessionalSummary,
          [],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #getProfessionalSummary,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [ControllerFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockControllerFactory extends _i1.Mock implements _i7.ControllerFactory {
  MockControllerFactory() {
    _i1.throwOnMissingStub(this);
  }
}
